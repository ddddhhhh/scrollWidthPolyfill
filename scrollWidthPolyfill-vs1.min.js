// Scroll Width Polyfill version 1
// Github: https://github.com/gregwhitworth/scrollWidthPolyfill
// License: MIT License (http://opensource.org/licenses/MIT)
var polyScrollWidth=(function(document,window){var polyScrollWidth=window.polyScrollWidth||{"needsPoly":false,"version":1};init();function init(){var needsPoly=featureDetect();if(!needsPoly){polyScrollWidth.needsPoly=false;return polyScrollWidth}else{polyScrollWidth.needsPoly=true}Object.defineProperty(Element.prototype,"scrollWidth",{get:getScrollWidth})}function featureDetect(){var needsPoly=false;var overrideStyles=[{"name":"float","value":"left"},{"name":"paddingLeft","value":"0px"},{"name":"paddingRight","value":"0px"},{"name":"position","value":"absolute"},{"name":"visibility","value":"hidden"},{"name":"width","value":"0px"}];var ghostMeasureInput=createGhostElement("input",null,overrideStyles,"Test",true);if(ghostMeasureInput.scrollWidth==0){needsPoly=true}return needsPoly}function createGhostElement(elType,computedStyles,overrideStyles,content,callScrollWidth){var id,el,ghostMeasure;elType=elType.toLowerCase();id="swMeasure-"+Date.now();el=document.createElement(elType);el.id=id;if(computedStyles!==null){var csKeys=Object.keys(computedStyles.__proto__);csKeys.forEach(function(prop){el.style[prop]=computedStyles[prop]})}overrideStyles.forEach(function(overrideStyle){el.style[overrideStyle.name]=overrideStyle.value});if(elType=="input"||elType=="textarea"){el.value=content}else{el.textContent=content}document.getElementsByTagName('body')[0].appendChild(el);el=document.getElementById(id);ghostMeasure={"scrollWidth":(callScrollWidth)?el.scrollWidth:0,"clientWidth":parseInt(el.clientWidth)};el.outerHTML="";delete el;return ghostMeasure}function getScrollWidth(){var width="auto";var computedStyles=window.getComputedStyle(this,null);if(this.nodeName=="TEXTAREA")width=computedStyles.width;var overrideStyles=[{"name":"position","value":"absolute"},{"name":"float","value":"left"},{"name":"visibility","value":"hidden"},{"name":"width","value":width}];var ghost=createGhostElement("div",computedStyles,overrideStyles,this.value,false);return Math.max(parseInt(computedStyles.width),ghost.clientWidth)}return polyScrollWidth})(document,window);